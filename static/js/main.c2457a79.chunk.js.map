{"version":3,"sources":["components/Card/ImageCard/index.jsx","components/Card/index.jsx","pages/Home/index.jsx","pages/Portfolio/index.jsx","routes.jsx","components/Header/Nav/NavItem/index.jsx","components/Header/Nav/index.jsx","components/Header/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ImageCard","props","_props$md","md","image","style","background","color","height","width","react_default","a","createElement","Col","id","src","alt","children","Card","multiline","display","Home","Container","Row","Card_ImageCard","components_Card","Component","Portfolio","Routes","BrowserRouter","Switch","Route","exact","path","component","NavItem","title","to","icon","href","material_icons_react_default","Nav","Header","Nav_Nav","Nav_NavItem","App","components_Header","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2457a79.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport { Col } from 'react-bootstrap';\r\n\r\nconst ImageCard = (props) => {\r\n\r\n    const {  md = 4, image, color, height, width } = props;\r\n\r\n    const style = {\r\n        background: color,\r\n        height, width\r\n    }\r\n\r\n    return (\r\n        <Col md={md}>\r\n            <div id=\"image-card\" style={style}>\r\n                <img src={image} alt={image} />\r\n                <div id=\"info\">\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n        </Col>\r\n    )\r\n};\r\n\r\nexport default ImageCard;\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport { Col } from 'react-bootstrap';\r\n\r\nimport ImageCard from './ImageCard';\r\n\r\nconst Card = (props) => {\r\n\r\n    const { md = 4, multiline, color, height, width } = props;\r\n\r\n    const display = multiline ? \"block\" : \"flex\";\r\n\r\n    const style = {\r\n        background: color,\r\n        height, width, display\r\n    }\r\n\r\n    return (\r\n        <Col md={md}>\r\n            <div id=\"card\" style={style}>\r\n                {props.children}\r\n            </div>\r\n        </Col>\r\n    )\r\n};\r\n\r\nexport default Card;\r\nexport { ImageCard };","import React, { Component } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport Card, { ImageCard } from '../../components/Card';\r\n\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <Container id=\"container\">\r\n        <Row>\r\n          <ImageCard md={4} image=\"https://i.imgur.com/knzB621.jpg\" color='#2c2c2c' height={'340px'}>\r\n            <p>htlm/css/js/php</p>\r\n            <h1>Cloud Craft</h1>\r\n          </ImageCard>\r\n          <Card md={8} color='#2c2c2c' height={'141px'}>\r\n            <h1>Olá!</h1>\r\n          </Card>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport Card, { ImageCard } from '../../components/Card';\r\n\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nconst Portfolio = () => (\r\n    <Container id=\"container\">\r\n        <Row>\r\n            <Card multiline md={12} color='#2c2c2c' height={'165px'}>\r\n                <h1>Portfolio</h1>\r\n                <p>Uma amostra de todos os meus trabalhos</p>\r\n            </Card>\r\n        </Row>\r\n    </Container>\r\n);\r\n\r\nexport default Portfolio;\r\n","import React from 'react';\r\n\r\nimport {\r\n    BrowserRouter,\r\n    Switch,\r\n    Route\r\n} from 'react-router-dom';\r\n\r\nimport Home from './pages/Home';\r\nimport Portfolio from './pages/Portfolio';\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/portfolio\" component={Portfolio} />\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport MaterialIcon from 'material-icons-react';\r\n\r\nconst NavItem = (props) => {\r\n    const { title, to, icon } = props;\r\n\r\n    return (\r\n        <li>\r\n            <a href={to}>\r\n                <MaterialIcon id=\"icon\" icon={icon} color='white' />\r\n                <span>{title}</span>\r\n            </a>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport NavItem from './NavItem';\r\n\r\nconst Nav = (props) => (\r\n    <ul>\r\n        {props.children}\r\n    </ul>\r\n);\r\n\r\nexport { Nav, NavItem };\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport { Nav, NavItem } from './Nav';\r\n\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <Container>\r\n            <a id=\"logo\" href=\"/\">\r\n                <span>itagliano</span>\r\n            </a>\r\n\r\n            <Nav>\r\n                <NavItem title='Portfolio' to='/portfolio' icon='archive' />\r\n                <NavItem title='Serviços' to='/services' icon='inbox' />\r\n                <NavItem title='Contato' to='/contact' icon='chat' />\r\n            </Nav>\r\n        </Container>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\nimport Routes from './routes';\n\nimport './styles.css';\n\nimport Header from './components/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}